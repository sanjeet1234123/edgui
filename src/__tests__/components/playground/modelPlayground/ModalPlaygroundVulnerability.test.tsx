// @ts-nocheck
/**
 * @jest-environment jsdom
 */

import { render, screen } from '@testing-library/react'
import '@testing-library/jest-dom'
import ModalPlaygroundVulnerability from '@/components/playground/modelPlayground/ModalPlaygroundVulnerability'
import { useModelStore } from '@/store/modelStore'
import { useGetModelVulnerabilityQuery } from '@/hooks/queries/usePlaygroundQueries'

// Mock the store
jest.mock('@/store/modelStore', () => ({
  useModelStore: jest.fn(),
}))

// Mock the query hook
jest.mock('@/hooks/queries/usePlaygroundQueries', () => ({
  useGetModelVulnerabilityQuery: jest.fn(),
}))

// Mock the CSS module
jest.mock(
  '@/components/playground/modelPlayground/modalPlayground.module.css',
  () => ({
    vulnerabilityControl: 'vulnerability-control-class',
    vulnerabilityTitle: 'vulnerability-title-class',
    vulnerabilityLabel: 'vulnerability-label-class',
    vulnerabilityText: 'vulnerability-text-class',
  }),
)

// Mock Mantine components
jest.mock('@mantine/core', () => {
  const originalModule = jest.requireActual('@mantine/core')
  const Accordion = ({ children, ...props }) => (
    <div data-testid="accordion" {...props}>
      {children}
    </div>
  )
  Accordion.Item = ({ children, value }) => (
    <div data-testid="accordion-item" data-value={value}>
      {children}
    </div>
  )
  Accordion.Control = ({ children }) => (
    <div data-testid="accordion-control">{children}</div>
  )
  Accordion.Panel = ({ children }) => (
    <div data-testid="accordion-panel">{children}</div>
  )
  return {
    ...originalModule,
    Accordion,
    Group: ({ children, gap, justify, align, style }) => (
      <div
        data-testid="group"
        data-gap={gap}
        data-justify={justify}
        data-align={align}
        style={style}
      >
        {children}
      </div>
    ),
    Stack: ({ children, gap }) => (
      <div data-testid="stack" data-gap={gap}>
        {children}
      </div>
    ),
    Text: ({ children, fw, size, c, classNames }) => (
      <div
        data-testid="text"
        data-fw={fw}
        data-size={size}
        data-c={c}
        data-classnames={JSON.stringify(classNames)}
      >
        {children}
      </div>
    ),
    Box: ({ children, style }) => (
      <div data-testid="box" style={style}>
        {children}
      </div>
    ),
    Badge: ({ children, size, color, variant }) => (
      <div
        data-testid="badge"
        data-size={size}
        data-color={color}
        data-variant={variant}
      >
        {children}
      </div>
    ),
    Tooltip: ({ children, label, multiline, w, transitionProps, position }) => (
      <div
        data-testid="tooltip"
        data-label={typeof label === 'string' ? label : '[ReactNode]'}
        data-multiline={multiline}
        data-width={w}
        data-position={position}
      >
        {children}
      </div>
    ),
  }
})

describe('ModalPlaygroundVulnerability', () => {
  const mockModel = {
    model_name: 'test-model',
  }

  const mockVulnerabilities = {
    vulnerabilities: [
      {
        vulnerability_type: 'Test Vulnerability',
        security_rating: 5,
        status: 'Active Threat',
        severity: 'High',
        safety_status: 'Unsafe',
        impact: 'Test Impact',
        mitigation: 'Test Mitigation',
        description: 'Test Description',
      },
    ],
  }

  beforeEach(() => {
    useModelStore.mockReturnValue({ currentModel: mockModel })
    useGetModelVulnerabilityQuery.mockReturnValue({
      data: mockVulnerabilities,
    })
  })

  afterEach(() => {
    jest.clearAllMocks()
  })

  it('renders nothing when no vulnerabilities exist', () => {
    useGetModelVulnerabilityQuery.mockReturnValue({
      data: { vulnerabilities: [] },
    })

    const { container } = render(<ModalPlaygroundVulnerability />)
    expect(container).toBeEmptyDOMElement()
  })

  it('renders vulnerability information correctly', () => {
    render(<ModalPlaygroundVulnerability />)

    // Check if the main title is rendered
    expect(screen.getByText('Model Vulnerabilities')).toBeInTheDocument()

    // Check if vulnerability type is rendered
    expect(screen.getByText('Test Vulnerability')).toBeInTheDocument()

    // Check if severity badge is rendered
    const severityBadge = screen.getAllByTestId('badge')[0]
    expect(severityBadge).toHaveAttribute('data-color', 'orange')
    expect(severityBadge).toHaveTextContent('High')

    // Check if safety status badge is rendered
    const safetyBadge = screen.getAllByTestId('badge')[1]
    expect(safetyBadge).toHaveAttribute('data-color', 'red')
    expect(safetyBadge).toHaveTextContent('Unsafe')

    // Check if impact and mitigation are rendered
    expect(screen.getByText(/Impact:/)).toBeInTheDocument()
    expect(screen.getByText(/Mitigation:/)).toBeInTheDocument()
  })

  it('handles different security ratings correctly', () => {
    const differentRatings = [
      { rating: 1, expectedColor: 'red' },
      { rating: 3, expectedColor: 'orange' },
      { rating: 5, expectedColor: 'yellow' },
      { rating: 7, expectedColor: 'green' },
      { rating: 9, expectedColor: 'gray' },
    ]

    differentRatings.forEach(({ rating }) => {
      useGetModelVulnerabilityQuery.mockReturnValue({
        data: {
          vulnerabilities: [
            {
              ...mockVulnerabilities.vulnerabilities[0],
              security_rating: rating,
            },
          ],
        },
      })

      const { unmount } = render(<ModalPlaygroundVulnerability />)
      // Check that the tooltip is rendered for the vulnerability
      expect(screen.getByTestId('tooltip')).toBeInTheDocument()
      // Check that at least 2 badges are rendered (severity and safety status)
      expect(screen.getAllByTestId('badge').length).toBeGreaterThanOrEqual(2)
      unmount()
    })
  })

  it('handles different severity levels correctly', () => {
    const differentSeverities = [
      { severity: 'Critical', expectedColor: 'red' },
      { severity: 'High', expectedColor: 'orange' },
      { severity: 'Moderate', expectedColor: 'yellow' },
      { severity: 'Low', expectedColor: 'green' },
      { severity: 'Normal', expectedColor: 'green' },
    ]

    differentSeverities.forEach(({ severity, expectedColor }) => {
      useGetModelVulnerabilityQuery.mockReturnValue({
        data: {
          vulnerabilities: [
            {
              ...mockVulnerabilities.vulnerabilities[0],
              severity,
            },
          ],
        },
      })

      const { unmount } = render(<ModalPlaygroundVulnerability />)
      const severityBadge = screen.getAllByTestId('badge')[0]
      expect(severityBadge).toHaveAttribute('data-color', expectedColor)
      expect(severityBadge).toHaveTextContent(severity)
      unmount()
    })
  })
})
